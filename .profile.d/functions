# vim: ft=zsh

Python() (
    export PYTHONPATH="${HOME}/.python.d:${PYTHONPATH}"
    export PYTHONSTARTUP="${HOME}/.python.d/rc.py"
    if [ $# -gt 0 ]; then
        pdb "$@"
    else
        command python -q
    fi
)

ls() {
    command ls --human-readable \
               --escape \
               --width=$COLUMNS \
               -C \
               --color=always "$@" | less
}

deprecated() {
   local original=$1
   shift

   tput setaf $COLOR_YELLOW
   echo "Command \"$original\" is deprecated; use \"$*\" instead"
   tput sgr0

   "$@"
}

PQE() {
    pacman -Qe | cut -d ' ' -f 1 | column -c $COLUMNS | less
}

PQESize() {
    pacman -Qie \
      | awk 'BEGIN {
                 ORS=" "
                 OFMT="%.2f"
             }

             $1 == "Name" { print $3 }
             $1 " " $2 == "Installed Size" {
                 if ($4 > 1024) {
                     printf OFMT " %s\n", $4/1024, "MiB"
                 } else {
                     printf OFMT " %s\n", $4, $5
                 }
             }' \
      | column -t \
      | column -c $COLUMNS \
      | less
}

PQESize2() {
    pacman -Qie \
      | awk 'BEGIN { ORS = " " }

             $1 == "Name" { print $3 }

             $1 " " $2 == "Installed Size" {
                 size = $(NF-1)
                 size *= 1024
                 print size "\n"
             }' \
      | sort -rnk 2 \
      | awk 'BEGIN {
                 suffix[0] = "B"
                 suffix[1] = "KiB"
                 suffix[2] = "MiB"
                 suffix[3] = "GiB"
             }
             $0 !~ /^[[:space:]]*$/ {
                 name = $1
                 size = $2
                 oom  = 0
                 while (size > 1024) {
                     size /= 1024
                     oom++
                 }
                 printf "%s %.2f %s\n", name, size, suffix[oom]
             }' \
      | column -t \
      | column -c $COLUMNS \
      | less
}

mail_account() {
    if [ -z "$M" ]; then
        if _isSchoolTime; then
            echo cmail.carleton.ca
        else
            echo alexpilon.ca
        fi
    else
        echo "$M"
        unset M
    fi
}

mbsync() {
    if [ $# = 0 ]; then
        local MAIL_ACCOUNT=$(mail_account)
        if [ -n "$MAIL_ACCOUNT" ] && [ -d "$HOME/Documents/Mail/$MAIL_ACCOUNT" ]; then
            command mbsync "$MAIL_ACCOUNT"
        else
            echo "Cannot sync '$MAIL_ACCOUNT': No such file or directory" 1>&2
            return 1
        fi
    else
        command mbsync "$@"
    fi
}

rc() {
    if [ $# = 0 ]; then
        action=list-units
    else
        action="$1"
        shift
    fi
    case "$action" in
        l|lu) action=list-units ;;
        ls) action=list-sockets ;;
    esac
    case "$action" in
        list*|status|show|-*)
            systemctl "$action" "$@"
            ;;
        log)
            if ! [ $# = 1 ]; then
                echo "Only 1 argument supported to 'log' for now." 1>&2
                return 1
            else
                sudo journalctl -u "$1"
            fi
            ;;
        *)
            sudo systemctl "$action" "$@"
            ;;
    esac
}

SafeLDD() {
    objdump -p "$@" | grep NEEDED | awk '{print $2}'
}


ExtractSrc() {
    grep -h -o -e 'src="[^"]*' -e "src='[^']*" "$@" | cut -b 6-
}

WWWExtractSrc() {
    # Expects only well-formed href attributes.
    if [ "$#" = 0 ]; then
        echo 'ExtractHref: ERROR: Expected URL argument.' 1>&2
    else
        for i in "$@"; do
            curl -L "$i"
        done | ExtractSrc
    fi
}

ExtractHref() {
    # `-i` option to grep necessary because whoever generated the java
    # documentation can't generate proper XHTML. Tags must be lower space.
    # Yeeeesh!
    grep -h -i -o -e 'href="[^"]*' -e "href='[^']*" "$@" | cut -b 7-
}

WWWExtractHref() {
    # Expects only well-formed href attributes.
    if [ "$#" = 0 ]; then
        echo 'ExtractHref: ERROR: Expected URL argument.' 1>&2
    else
        for i in "$@"; do
            curl -L "$i"
        done | ExtractHref
    fi
}

ModPaths() {
    lsmod \
      | sed 1d \
      | awk '{print $1}' \
      | xargs -L 1 modinfo -F filename \
      | cut -d / -f 6- \
      | sort \
      | cut -d . -f 1
}

FilterShellComment() {
    grep -v -e '^[[:space:]]*#' -e '^[[:space:]]*$' "$@"
}

UnicodeLookup() {
    [ -n "$BROWSER" ] && "$BROWSER" "http://unicode.org/cldr/utility/character.jsp?a=$1"
}

hexlify() {
    if [ $# != 1 ]; then
        echo "usage: $0 <string>" 1>&2
        return 1
    else
        python -c "from binascii import hexlify; print(hexlify('"$1"'.encode()).decode())"
    fi
}

_webdoc() {
    docs="$1"
    shift
    prefix="$2"
    shift

    for arg in "$@"; do
        local target
        target="${docs}/${arg}.html"
        if ! [ -f  "$target" ]; then
            echo "${prefix}: No such file or directory: \"$target\"" 1>&2
            return 1
        fi
    done

    while [ $# -gt 0 ]; do
        "$BROWSER" "file://${docs}/${1}.html"
        shift
        while [ -z "$response" ] && [ $# -gt 0 ]; do
            # Emulate man
            echo "--${prefix}-- next: $1 [ view (return) | skip (Ctrl-D) | quit (Ctrl-C) ]"
            local response
            if ! read response; then
                shift
            else
                break
            fi
        done
    done
}

# TODO: Handle member references in first argument.
# TODO: Handle builtins: constants, functions, classes, etc.
Pydoc() {
    local basedir='/usr/share/doc/python/html'
    if [ $# = 0 ]; then
        "$BROWSER" "${basedir}/index.html"
    else
        _webdoc "${basedir}/library" Pydoc "$@"
    fi
}

# TODO: Catch member references in first argument and jump to first instance if
#       type not specified.
Javadoc() {
    _webdoc /usr/share/doc/java8-openjdk/api \
            Javadoc \
            $(for arg in "$@"; do
                  if command grep -qF . <<< "$arg"; then
                      echo "$(tr . / <<< "$arg")"
                  else
                      echo "java/lang/${arg}"
                  fi
              done)
}

ImageSize() {
    if [ $# = 0 ]; then
        echo /dev/stdin
    else
        for pic in "$@"; do
            echo "$pic"
        done
    fi \
      | while read line; do
            identify "$line" \
              | cut -c $(($(expr length "$line") + 1))-
        done 2>/dev/null \
      | awk '{ print $2 }'
}

UT2004() {
    pushd .
    cd /opt/ut2004/System
    xinit ./ut2004-bin-linux-amd64 -- :${1:-0}
    popd .
}

Termium() {
    local _lang
    local _base
    _lang=eng
    _base="http://www.btb.termiumplus.gc.ca/tpv2alpha/alpha-eng.html?lang=${_lang}"
    if [ $# = 0 ]; then
        "$BROWSER"  "$_base"
    else
        "$BROWSER" "${_base}&i=&index=alt&__index=alt&srchtxt=$(python -c "import urllib.request; print(urllib.request.quote(\"$*\"))")&comencsrch.x=0&comencsrch.y=0"
    fi
}

OPL() {
    # TODO: Support other search forms
    local _base
    local _type
    local _query
    local _locale
    _base=http://ottawa.bibliocommons.com/search
    _type=keyword
    _locale=en_CA
    _query="$(python -c 'from sys import argv; print("+".join(argv[1:]))' "$@")"
    "$BROWSER" "${_base}?locale=${_locale}&t=${_type}&q=${_query}"
}

Github() {
    local _base
    local _user
    local _repo

    _base="https://github.com"
    _user="${${1%%/*}:-pilona}"
    if grep -qF / <<< "$1"; then
        _repo="${1##*/}"
    else
        _repo=
    fi

    "$BROWSER" "${_base}/${_user}/${_repo}"
}

LinuxGitMsg() {
    local _base
    local _qs

    _base="http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/log/"
    _qs="$(python -c "from urllib.parse import urlencode; print(urlencode({'qt': 'grep', 'q': '$*'}))")"

    "$BROWSER" "${_base}?${_qs}"
}

StableQueue() {
    "$BROWSER" 'http://git.kernel.org/cgit/linux/kernel/git/stable/stable-queue.git/tree/'
}

Quote() {
    python -c "from urllib.parse import quote; print(quote('$*'))"
}

UnQuote() {
    python -c "from urllib.parse import unquote; print(unquote('$*'))"
}

Weather() {
    "$BROWSER" "http://weather.gc.ca/city/pages/on-118_metric_e.html"
}

OpenWeather() {
   case $1 in
      '') local url='http://openweathermap.org' ;;
      'kanata') local url='http://openweathermap.org/city/5972863' ;;
      'ottawa') local url='http://openweathermap.org/city/6094817' ;;
   esac
   "$BROWSER" "$url"
}

Radar() {
    "$BROWSER" "http://weather.gc.ca/radar/index_e.html?id=xft"
}

Canal() {
    "$BROWSER" "http://www.ncc-ccn.gc.ca/rideau-canal-skateway/"
}

W3C() {
    "$BROWSER" "https://www.w3.org/wiki/HTML/Elements/$1"
}

MDN() {
    "$BROWSER" "https://developer.mozilla.org/en/docs/Web/HTML/Element/$1"
}

Scan() {
    scanimage --device='fujitsu:ScanSnap S510M:502537' \
              --mode Color \
              --source 'ADF Duplex' \
              --resolution 150 \
              "$@"
}

Wiktionary() {
    # TODO: percent-encode
    "$BROWSER" "http://en.wiktionary.org/wiki/$1"
}

NmapSSL() {
    nmap --script ssl-enum-ciphers -p "$@"
}

ReallyMute() {
    for control in Master Headphone Speaker Bass\ Speaker PCM; do
        [ "$control" = PCM ] || amixer --quiet set "$control" mute
        amixer --quiet set "$control" 0
    done
}

PDFCat() {
    local output="$1"
    shift
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$output" "$@"
}

MXToolBox() {
    if [ $# = 1 ]; then
        "$BROWSER" "http://mxtoolbox.com/domain/$1/?source=findmonitors"
    else
        echo 'usage: MXToolBox <domain>' 1>&2
    fi
}

_pacmanQlPrettySearch() {
    target="$1"
    shift
    pacman -Ql "$@" \
      | grep "$target" \
      | awk -F / '{print $NF}' \
      | column -c $COLUMNS
}

faketty() {
    script --quiet --command "$*" /dev/null
}

# http://www.etalabs.net/sh_tricks.html
fnmatch() {
    case "$2" in
        $1) return 0 ;;
         *) return 1 ;;
    esac
}

Route() {
    "$BROWSER" "http://www.octranspo1.com/routes?lang=en&date=$(date +%Y%m%d)&rte=$1"
}

chomp() {
    sed 's/^[[:space:]]*//; s/^[[:space:]]*$//' "$@"
}

ROVNC() {
    x0vncserver -SendCutText=0 \
                -AcceptCutText=0 \
                -AcceptPointerEvents=0 \
                -AcceptKeyEvents=0 \
                -ZlibLevel=9 \
                -SecurityTypes=None \
                "$@"
}

Duration() {
    mediainfo ${*:-*} \
      | awk 'BEGIN {
                 total=0
             }
             $0 ~ /Duration / && NR % 3 == 1 {
                 total += $3 * 60 + $4
             }
             END {
                hours = total / 3600
                total %= 3600

                minutes = total / 60
                total %= 60

                seconds = total
                printf "%dh %dmn %ds\n", hours, minutes, seconds
             }'
}

Directions() {
    # TODO: urlencode
    "$BROWSER" "https://www.google.com/maps/dir/$1/$2"
}

RubyCVE() {
   "$BROWSER" "https://web.nvd.nist.gov/view/vuln/search-results?query=Ruby&search_type=all&cves=on"
}

GetPassword() {
    scrypt dec ~/Documents/.passdb/"$1" | xclip -selection clipboard
}

NewPassword() {
    if [ -e ~/Documents/.passdb/"$1" ]; then
        tput setaf $COLOR_RED
        tput bold
        echo "\"$1\" already exists!" 1>&2
        tput sgr0
        return 1
    fi

    pwgen ${2:-10} 1 \
      | xclip -filter -selection clipboard \
      | scrypt enc /dev/stdin ~/Documents/.passdb/"$1"
}

LinkCheck() {
   wget --spider \
        --execute robots=off \
        --recursive \
        --page-requisites \
        "$@"
}

SYN-SENT() {
   ss -antp | grep SYN-SENT
}

MicrophoneScope() {
    ffplay -f alsa -i "${default:-$1}" -showmode 1
}

GlyphDebug() {
    FC_DEBUG=4 pango-view --font="$1" -t "$2" | grep family:
}
